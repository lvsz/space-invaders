#lang racket

(require "Graphics.rkt")

(provide (all-defined-out))

(define (player-tile)
  (let ((tile (make-tile 26 16 #f #f)))
    ((tile 'draw-rectangle) 6 0  1 1 "cyan")
    ((tile 'draw-rectangle) 5 1  3 3 "cyan")
    ((tile 'draw-rectangle) 1 3 11 1 "cyan")
    ((tile 'draw-rectangle) 0 4 13 4 "cyan")
    tile))

(define (bullet-tile)
  (let ((tile (make-tile 2 14 #f #f)))
    ((tile 'draw-rectangle) 0 0 1 7 "yellow")
    tile))

(define (invader-1 color)
  (let ((tile-1 (make-tile 12 8 #f #f))
        (tile-2 (make-tile 12 8 #f #f))
        (base
          (lambda (tile)
            ((tile 'draw-rectangle) 4 0  4 1 color)
            ((tile 'draw-rectangle) 4 0  4 1 color)
            ((tile 'draw-rectangle) 1 1 10 1 color)
            ((tile 'draw-rectangle) 0 2 12 1 color)
            ((tile 'draw-rectangle) 0 3  3 1 color)
            ((tile 'draw-rectangle) 5 3  2 1 color)
            ((tile 'draw-rectangle) 9 3  3 1 color)
            ((tile 'draw-rectangle) 0 4 12 1 color)
            ((tile 'draw-rectangle) 5 6  2 1 color))))
    (base tile-1)
    ((tile-1 'draw-rectangle)  2 5  3 1 color)
    ((tile-1 'draw-rectangle)  7 5  3 1 color)
    ((tile-1 'draw-rectangle)  1 6  2 1 color)
    ((tile-1 'draw-rectangle)  9 6  2 1 color)
    ((tile-1 'draw-rectangle)  2 7  2 1 color)
    ((tile-1 'draw-rectangle)  8 7  2 1 color)
    (base tile-2)
    ((tile-2 'draw-rectangle)  3 5  2 1 color)
    ((tile-2 'draw-rectangle)  7 5  2 1 color)
    ((tile-2 'draw-rectangle)  2 6  2 1 color)
    ((tile-2 'draw-rectangle)  8 6  2 1 color)
    ((tile-2 'draw-rectangle)  0 7  2 1 color)
    ((tile-2 'draw-rectangle) 10 7  2 1 color)
    (make-tile-sequence
      (list tile-1 tile-2))))

(define (invader-2 color)
  (let ((tile-1 (make-tile 11 8 #f #f))
        (tile-2 (make-tile 11 8 #f #f))
        (base
          (lambda (tile)
            ((tile 'draw-rectangle) 2 0 1 1 color)
            ((tile 'draw-rectangle) 8 0 1 1 color)
            ((tile 'draw-rectangle) 3 1 1 1 color)
            ((tile 'draw-rectangle) 7 1 1 1 color)
            ((tile 'draw-rectangle) 2 2 7 1 color)
            ((tile 'draw-rectangle) 1 3 2 1 color)
            ((tile 'draw-rectangle) 4 3 3 1 color)
            ((tile 'draw-rectangle) 8 3 2 1 color)
            ((tile 'draw-rectangle) 1 4 9 1 color)
            ((tile 'draw-rectangle) 2 6 1 1 color)
            ((tile 'draw-rectangle) 8 6 1 1 color))))
    (base tile-1)
    ((tile-1 'draw-rectangle)  0 4 1 3 color)
    ((tile-1 'draw-rectangle) 10 4 1 3 color)
    ((tile-1 'draw-rectangle)  2 5 7 1 color)
    ((tile-1 'draw-rectangle)  3 7 2 1 color)
    ((tile-1 'draw-rectangle)  6 7 2 1 color)
    (base tile-2)
    ((tile-2 'draw-rectangle)  0 1 1 4 color)
    ((tile-2 'draw-rectangle) 10 1 1 4 color)
    ((tile-2 'draw-rectangle)  1 5 9 1 color)
    ((tile-2 'draw-rectangle)  1 7 1 1 color)
    ((tile-2 'draw-rectangle)  9 7 1 1 color)
    (make-tile-sequence
      (list tile-1 tile-2))))

(define (invader-3 color)
  (let ((tile-1 (make-tile 10 8 #f #f))
        (tile-2 (make-tile 10 8 #f #f))
        (base
          (lambda (tile)
            ((tile 'draw-rectangle) 5 0 2 1 color)
            ((tile 'draw-rectangle) 4 1 4 1 color)
            ((tile 'draw-rectangle) 3 2 6 1 color)
            ((tile 'draw-rectangle) 2 3 2 1 color)
            ((tile 'draw-rectangle) 5 3 2 1 color)
            ((tile 'draw-rectangle) 8 3 2 1 color)
            ((tile 'draw-rectangle) 2 4 8 1 color))))
    (base tile-1)
    ((tile-1 'draw-rectangle) 3 5 1 1 color)
    ((tile-1 'draw-rectangle) 5 5 2 1 color)
    ((tile-1 'draw-rectangle) 8 5 1 1 color)
    ((tile-1 'draw-rectangle) 2 6 1 1 color)
    ((tile-1 'draw-rectangle) 9 6 1 1 color)
    ((tile-1 'draw-rectangle) 3 7 1 1 color)
    ((tile-1 'draw-rectangle) 8 7 1 1 color)
    (base tile-2)
    ((tile-2 'draw-rectangle) 4 5 1 1 color)
    ((tile-2 'draw-rectangle) 7 5 1 1 color)
    ((tile-2 'draw-rectangle) 3 6 1 1 color)
    ((tile-2 'draw-rectangle) 5 6 2 1 color)
    ((tile-2 'draw-rectangle) 8 6 1 1 color)
    ((tile-2 'draw-rectangle) 2 7 1 1 color)
    ((tile-2 'draw-rectangle) 4 7 1 1 color)
    ((tile-2 'draw-rectangle) 7 7 1 1 color)
    ((tile-2 'draw-rectangle) 9 7 1 1 color)
    (make-tile-sequence
      (list tile-1 tile-2))))

(define (explosion-tile)
  (let ((tile (make-tile 13 8 #f #f)))
    ((tile 'draw-rectangle)  4 0 1 1 "white")
    ((tile 'draw-rectangle)  8 0 1 1 "white")
    ((tile 'draw-rectangle)  1 1 1 1 "white")
    ((tile 'draw-rectangle)  5 1 1 1 "white")
    ((tile 'draw-rectangle)  7 1 1 1 "white")
    ((tile 'draw-rectangle) 11 1 1 1 "white")
    ((tile 'draw-rectangle)  2 2 1 1 "white")
    ((tile 'draw-rectangle) 10 2 1 1 "white")
    ((tile 'draw-rectangle)  3 3 1 1 "white")
    ((tile 'draw-rectangle)  9 3 1 1 "white")
    ((tile 'draw-rectangle)  0 4 2 1 "white")
    ((tile 'draw-rectangle) 11 4 2 1 "white")
    ((tile 'draw-rectangle)  3 5 1 1 "white")
    ((tile 'draw-rectangle)  9 5 1 1 "white")
    ((tile 'draw-rectangle)  2 6 1 1 "white")
    ((tile 'draw-rectangle)  5 6 1 1 "white")
    ((tile 'draw-rectangle)  7 6 1 1 "white")
    ((tile 'draw-rectangle) 10 6 1 1 "white")
    ((tile 'draw-rectangle)  1 7 1 1 "white")
    ((tile 'draw-rectangle)  4 7 1 1 "white")
    ((tile 'draw-rectangle)  8 7 1 1 "white")
    ((tile 'draw-rectangle) 11 7 1 1 "white")
    tile))

(define (exit-tile)
  (let ((tile (make-tile 52 12 #f #f)))
    ((tile 'draw-text) "EXIT" 12 0 0 "white")
    tile))

  (define (start-tile)
    (let ((tile (make-tile 52 12 #f #f)))
      ((tile 'draw-text) "START" 12 0 0 "white")
      tile))

  (define (pointer-tile)
    (let ((tile (make-tile 7 12 #f #f)))
      ((tile 'draw-text) ">" 12 0 0 "white")
      tile))
